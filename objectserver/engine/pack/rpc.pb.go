// Copyright (c) 2016-2018 iQIYI.com.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rpc.proto

package pack

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Partition struct {
	Device    string `protobuf:"bytes,1,opt,name=device" json:"device,omitempty"`
	Policy    uint32 `protobuf:"varint,2,opt,name=policy" json:"policy,omitempty"`
	Partition string `protobuf:"bytes,3,opt,name=partition" json:"partition,omitempty"`
}

func (m *Partition) Reset()                    { *m = Partition{} }
func (m *Partition) String() string            { return proto.CompactTextString(m) }
func (*Partition) ProtoMessage()               {}
func (*Partition) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *Partition) GetDevice() string {
	if m != nil {
		return m.Device
	}
	return ""
}

func (m *Partition) GetPolicy() uint32 {
	if m != nil {
		return m.Policy
	}
	return 0
}

func (m *Partition) GetPartition() string {
	if m != nil {
		return m.Partition
	}
	return ""
}

type PartitionSuffixesReply struct {
	Suffixes []string `protobuf:"bytes,1,rep,name=suffixes" json:"suffixes,omitempty"`
}

func (m *PartitionSuffixesReply) Reset()                    { *m = PartitionSuffixesReply{} }
func (m *PartitionSuffixesReply) String() string            { return proto.CompactTextString(m) }
func (*PartitionSuffixesReply) ProtoMessage()               {}
func (*PartitionSuffixesReply) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *PartitionSuffixesReply) GetSuffixes() []string {
	if m != nil {
		return m.Suffixes
	}
	return nil
}

type SuffixHashesMsg struct {
	Device      string   `protobuf:"bytes,1,opt,name=device" json:"device,omitempty"`
	Policy      uint32   `protobuf:"varint,2,opt,name=policy" json:"policy,omitempty"`
	Partition   string   `protobuf:"bytes,3,opt,name=partition" json:"partition,omitempty"`
	Recalculate []string `protobuf:"bytes,4,rep,name=recalculate" json:"recalculate,omitempty"`
	ListDir     bool     `protobuf:"varint,5,opt,name=listDir" json:"listDir,omitempty"`
	ReclaimAge  uint64   `protobuf:"varint,6,opt,name=reclaimAge" json:"reclaimAge,omitempty"`
}

func (m *SuffixHashesMsg) Reset()                    { *m = SuffixHashesMsg{} }
func (m *SuffixHashesMsg) String() string            { return proto.CompactTextString(m) }
func (*SuffixHashesMsg) ProtoMessage()               {}
func (*SuffixHashesMsg) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *SuffixHashesMsg) GetDevice() string {
	if m != nil {
		return m.Device
	}
	return ""
}

func (m *SuffixHashesMsg) GetPolicy() uint32 {
	if m != nil {
		return m.Policy
	}
	return 0
}

func (m *SuffixHashesMsg) GetPartition() string {
	if m != nil {
		return m.Partition
	}
	return ""
}

func (m *SuffixHashesMsg) GetRecalculate() []string {
	if m != nil {
		return m.Recalculate
	}
	return nil
}

func (m *SuffixHashesMsg) GetListDir() bool {
	if m != nil {
		return m.ListDir
	}
	return false
}

func (m *SuffixHashesMsg) GetReclaimAge() uint64 {
	if m != nil {
		return m.ReclaimAge
	}
	return 0
}

type SuffixHashesReply struct {
	Hashed int64             `protobuf:"varint,1,opt,name=hashed" json:"hashed,omitempty"`
	Hashes map[string]string `protobuf:"bytes,2,rep,name=hashes" json:"hashes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *SuffixHashesReply) Reset()                    { *m = SuffixHashesReply{} }
func (m *SuffixHashesReply) String() string            { return proto.CompactTextString(m) }
func (*SuffixHashesReply) ProtoMessage()               {}
func (*SuffixHashesReply) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *SuffixHashesReply) GetHashed() int64 {
	if m != nil {
		return m.Hashed
	}
	return 0
}

func (m *SuffixHashesReply) GetHashes() map[string]string {
	if m != nil {
		return m.Hashes
	}
	return nil
}

type SyncMsg struct {
	LocalDevice string   `protobuf:"bytes,1,opt,name=localDevice" json:"localDevice,omitempty"`
	Host        string   `protobuf:"bytes,2,opt,name=host" json:"host,omitempty"`
	Port        int32    `protobuf:"varint,3,opt,name=port" json:"port,omitempty"`
	Device      string   `protobuf:"bytes,4,opt,name=device" json:"device,omitempty"`
	Policy      uint32   `protobuf:"varint,5,opt,name=policy" json:"policy,omitempty"`
	Partition   string   `protobuf:"bytes,6,opt,name=partition" json:"partition,omitempty"`
	Suffixes    []string `protobuf:"bytes,7,rep,name=suffixes" json:"suffixes,omitempty"`
}

func (m *SyncMsg) Reset()                    { *m = SyncMsg{} }
func (m *SyncMsg) String() string            { return proto.CompactTextString(m) }
func (*SyncMsg) ProtoMessage()               {}
func (*SyncMsg) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

func (m *SyncMsg) GetLocalDevice() string {
	if m != nil {
		return m.LocalDevice
	}
	return ""
}

func (m *SyncMsg) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *SyncMsg) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *SyncMsg) GetDevice() string {
	if m != nil {
		return m.Device
	}
	return ""
}

func (m *SyncMsg) GetPolicy() uint32 {
	if m != nil {
		return m.Policy
	}
	return 0
}

func (m *SyncMsg) GetPartition() string {
	if m != nil {
		return m.Partition
	}
	return ""
}

func (m *SyncMsg) GetSuffixes() []string {
	if m != nil {
		return m.Suffixes
	}
	return nil
}

type SyncReply struct {
	Success    bool              `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	Candidates map[string]string `protobuf:"bytes,2,rep,name=candidates" json:"candidates,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *SyncReply) Reset()                    { *m = SyncReply{} }
func (m *SyncReply) String() string            { return proto.CompactTextString(m) }
func (*SyncReply) ProtoMessage()               {}
func (*SyncReply) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{5} }

func (m *SyncReply) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *SyncReply) GetCandidates() map[string]string {
	if m != nil {
		return m.Candidates
	}
	return nil
}

type PartitionDeletionReply struct {
	Success bool `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
}

func (m *PartitionDeletionReply) Reset()                    { *m = PartitionDeletionReply{} }
func (m *PartitionDeletionReply) String() string            { return proto.CompactTextString(m) }
func (*PartitionDeletionReply) ProtoMessage()               {}
func (*PartitionDeletionReply) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{6} }

func (m *PartitionDeletionReply) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type PartitionAuditionReply struct {
	ProcessedBytes int64 `protobuf:"varint,1,opt,name=processedBytes" json:"processedBytes,omitempty"`
	ProcessedFiles int64 `protobuf:"varint,2,opt,name=processedFiles" json:"processedFiles,omitempty"`
	Quarantines    int64 `protobuf:"varint,3,opt,name=quarantines" json:"quarantines,omitempty"`
	Errors         int64 `protobuf:"varint,4,opt,name=errors" json:"errors,omitempty"`
}

func (m *PartitionAuditionReply) Reset()                    { *m = PartitionAuditionReply{} }
func (m *PartitionAuditionReply) String() string            { return proto.CompactTextString(m) }
func (*PartitionAuditionReply) ProtoMessage()               {}
func (*PartitionAuditionReply) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{7} }

func (m *PartitionAuditionReply) GetProcessedBytes() int64 {
	if m != nil {
		return m.ProcessedBytes
	}
	return 0
}

func (m *PartitionAuditionReply) GetProcessedFiles() int64 {
	if m != nil {
		return m.ProcessedFiles
	}
	return 0
}

func (m *PartitionAuditionReply) GetQuarantines() int64 {
	if m != nil {
		return m.Quarantines
	}
	return 0
}

func (m *PartitionAuditionReply) GetErrors() int64 {
	if m != nil {
		return m.Errors
	}
	return 0
}

func init() {
	proto.RegisterType((*Partition)(nil), "pack.Partition")
	proto.RegisterType((*PartitionSuffixesReply)(nil), "pack.PartitionSuffixesReply")
	proto.RegisterType((*SuffixHashesMsg)(nil), "pack.SuffixHashesMsg")
	proto.RegisterType((*SuffixHashesReply)(nil), "pack.SuffixHashesReply")
	proto.RegisterType((*SyncMsg)(nil), "pack.SyncMsg")
	proto.RegisterType((*SyncReply)(nil), "pack.SyncReply")
	proto.RegisterType((*PartitionDeletionReply)(nil), "pack.PartitionDeletionReply")
	proto.RegisterType((*PartitionAuditionReply)(nil), "pack.PartitionAuditionReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for PackRpcService service

type PackRpcServiceClient interface {
	ListPartitionSuffixes(ctx context.Context, in *Partition, opts ...grpc.CallOption) (*PartitionSuffixesReply, error)
	GetHashes(ctx context.Context, in *SuffixHashesMsg, opts ...grpc.CallOption) (*SuffixHashesReply, error)
	Sync(ctx context.Context, in *SyncMsg, opts ...grpc.CallOption) (*SyncReply, error)
	DeleteHandoff(ctx context.Context, in *Partition, opts ...grpc.CallOption) (*PartitionDeletionReply, error)
	AuditPartition(ctx context.Context, in *Partition, opts ...grpc.CallOption) (*PartitionAuditionReply, error)
}

type packRpcServiceClient struct {
	cc *grpc.ClientConn
}

func NewPackRpcServiceClient(cc *grpc.ClientConn) PackRpcServiceClient {
	return &packRpcServiceClient{cc}
}

func (c *packRpcServiceClient) ListPartitionSuffixes(ctx context.Context, in *Partition, opts ...grpc.CallOption) (*PartitionSuffixesReply, error) {
	out := new(PartitionSuffixesReply)
	err := grpc.Invoke(ctx, "/pack.PackRpcService/ListPartitionSuffixes", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *packRpcServiceClient) GetHashes(ctx context.Context, in *SuffixHashesMsg, opts ...grpc.CallOption) (*SuffixHashesReply, error) {
	out := new(SuffixHashesReply)
	err := grpc.Invoke(ctx, "/pack.PackRpcService/GetHashes", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *packRpcServiceClient) Sync(ctx context.Context, in *SyncMsg, opts ...grpc.CallOption) (*SyncReply, error) {
	out := new(SyncReply)
	err := grpc.Invoke(ctx, "/pack.PackRpcService/Sync", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *packRpcServiceClient) DeleteHandoff(ctx context.Context, in *Partition, opts ...grpc.CallOption) (*PartitionDeletionReply, error) {
	out := new(PartitionDeletionReply)
	err := grpc.Invoke(ctx, "/pack.PackRpcService/DeleteHandoff", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *packRpcServiceClient) AuditPartition(ctx context.Context, in *Partition, opts ...grpc.CallOption) (*PartitionAuditionReply, error) {
	out := new(PartitionAuditionReply)
	err := grpc.Invoke(ctx, "/pack.PackRpcService/AuditPartition", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PackRpcService service

type PackRpcServiceServer interface {
	ListPartitionSuffixes(context.Context, *Partition) (*PartitionSuffixesReply, error)
	GetHashes(context.Context, *SuffixHashesMsg) (*SuffixHashesReply, error)
	Sync(context.Context, *SyncMsg) (*SyncReply, error)
	DeleteHandoff(context.Context, *Partition) (*PartitionDeletionReply, error)
	AuditPartition(context.Context, *Partition) (*PartitionAuditionReply, error)
}

func RegisterPackRpcServiceServer(s *grpc.Server, srv PackRpcServiceServer) {
	s.RegisterService(&_PackRpcService_serviceDesc, srv)
}

func _PackRpcService_ListPartitionSuffixes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Partition)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PackRpcServiceServer).ListPartitionSuffixes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pack.PackRpcService/ListPartitionSuffixes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PackRpcServiceServer).ListPartitionSuffixes(ctx, req.(*Partition))
	}
	return interceptor(ctx, in, info, handler)
}

func _PackRpcService_GetHashes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SuffixHashesMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PackRpcServiceServer).GetHashes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pack.PackRpcService/GetHashes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PackRpcServiceServer).GetHashes(ctx, req.(*SuffixHashesMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _PackRpcService_Sync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PackRpcServiceServer).Sync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pack.PackRpcService/Sync",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PackRpcServiceServer).Sync(ctx, req.(*SyncMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _PackRpcService_DeleteHandoff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Partition)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PackRpcServiceServer).DeleteHandoff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pack.PackRpcService/DeleteHandoff",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PackRpcServiceServer).DeleteHandoff(ctx, req.(*Partition))
	}
	return interceptor(ctx, in, info, handler)
}

func _PackRpcService_AuditPartition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Partition)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PackRpcServiceServer).AuditPartition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pack.PackRpcService/AuditPartition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PackRpcServiceServer).AuditPartition(ctx, req.(*Partition))
	}
	return interceptor(ctx, in, info, handler)
}

var _PackRpcService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pack.PackRpcService",
	HandlerType: (*PackRpcServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListPartitionSuffixes",
			Handler:    _PackRpcService_ListPartitionSuffixes_Handler,
		},
		{
			MethodName: "GetHashes",
			Handler:    _PackRpcService_GetHashes_Handler,
		},
		{
			MethodName: "Sync",
			Handler:    _PackRpcService_Sync_Handler,
		},
		{
			MethodName: "DeleteHandoff",
			Handler:    _PackRpcService_DeleteHandoff_Handler,
		},
		{
			MethodName: "AuditPartition",
			Handler:    _PackRpcService_AuditPartition_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc.proto",
}

func init() { proto.RegisterFile("rpc.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 596 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x94, 0x4f, 0x6f, 0xd3, 0x30,
	0x18, 0xc6, 0xeb, 0x26, 0x6d, 0x97, 0xb7, 0xda, 0x0a, 0x16, 0x1b, 0x51, 0x35, 0x41, 0x14, 0x24,
	0x94, 0x53, 0x0f, 0x83, 0x03, 0x7f, 0x34, 0xc1, 0x60, 0xc0, 0x0e, 0x4c, 0x9a, 0xbc, 0x13, 0x47,
	0xe3, 0xb8, 0x9b, 0xb5, 0x90, 0x04, 0xdb, 0x99, 0xc8, 0xd7, 0x01, 0xf1, 0x29, 0x10, 0x77, 0x3e,
	0x16, 0xb2, 0x93, 0xb6, 0x6e, 0xa6, 0xa9, 0x42, 0xe2, 0x54, 0x3f, 0x4f, 0xdf, 0xd7, 0x7a, 0xf3,
	0xfc, 0x6c, 0x43, 0x20, 0x4b, 0x36, 0x2b, 0x65, 0xa1, 0x0b, 0xec, 0x97, 0x94, 0x5d, 0xc5, 0x9f,
	0x20, 0x38, 0xa3, 0x52, 0x0b, 0x2d, 0x8a, 0x1c, 0xef, 0xc1, 0x30, 0xe5, 0xd7, 0x82, 0xf1, 0x10,
	0x45, 0x28, 0x09, 0x48, 0xab, 0x8c, 0x5f, 0x16, 0x99, 0x60, 0x75, 0xd8, 0x8f, 0x50, 0xb2, 0x4d,
	0x5a, 0x85, 0xf7, 0x21, 0x28, 0x17, 0xcd, 0xa1, 0x67, 0x5b, 0x56, 0x46, 0xfc, 0x14, 0xf6, 0x96,
	0x5b, 0x9f, 0x57, 0xf3, 0xb9, 0xf8, 0xc6, 0x15, 0xe1, 0x65, 0x56, 0xe3, 0x29, 0x6c, 0xa9, 0xd6,
	0x08, 0x51, 0xe4, 0x25, 0x01, 0x59, 0xea, 0xf8, 0x17, 0x82, 0x49, 0x53, 0x7d, 0x42, 0xd5, 0x25,
	0x57, 0xa7, 0xea, 0xe2, 0xff, 0xce, 0x85, 0x23, 0x18, 0x4b, 0xce, 0x68, 0xc6, 0xaa, 0x8c, 0x6a,
	0x1e, 0xfa, 0x76, 0x00, 0xd7, 0xc2, 0x21, 0x8c, 0x32, 0xa1, 0xf4, 0xb1, 0x90, 0xe1, 0x20, 0x42,
	0xc9, 0x16, 0x59, 0x48, 0xfc, 0x00, 0x40, 0x72, 0x96, 0x51, 0xf1, 0xe5, 0xe8, 0x82, 0x87, 0xc3,
	0x08, 0x25, 0x3e, 0x71, 0x9c, 0xf8, 0x07, 0x82, 0xbb, 0xee, 0xf4, 0xcd, 0xf7, 0xee, 0xc1, 0xf0,
	0xd2, 0xc8, 0xd4, 0xce, 0xef, 0x91, 0x56, 0xe1, 0x97, 0xad, 0xaf, 0xc2, 0x7e, 0xe4, 0x25, 0xe3,
	0x83, 0x47, 0x33, 0xc3, 0x64, 0x76, 0x63, 0x83, 0x59, 0xb3, 0x7e, 0x97, 0x6b, 0x59, 0xb7, 0xcd,
	0x6a, 0xfa, 0x1c, 0xc6, 0x8e, 0x8d, 0xef, 0x80, 0x77, 0xc5, 0xeb, 0x36, 0x20, 0xb3, 0xc4, 0xf7,
	0x60, 0x70, 0x4d, 0xb3, 0x8a, 0xdb, 0x70, 0x02, 0xd2, 0x88, 0x17, 0xfd, 0x67, 0x28, 0xfe, 0x8d,
	0x60, 0x74, 0x5e, 0xe7, 0xcc, 0x64, 0x1b, 0xc1, 0x38, 0x2b, 0x18, 0xcd, 0x8e, 0xdd, 0x80, 0x5d,
	0x0b, 0x63, 0xf0, 0x2f, 0x0b, 0xa5, 0xdb, 0x6d, 0xec, 0xda, 0x78, 0x65, 0x21, 0xb5, 0x0d, 0x77,
	0x40, 0xec, 0xda, 0xa1, 0xe4, 0xdf, 0x42, 0x69, 0x70, 0x3b, 0xa5, 0x61, 0x97, 0x92, 0x7b, 0x46,
	0x46, 0x9d, 0x33, 0xf2, 0x13, 0x41, 0x60, 0xe6, 0x6f, 0xd2, 0x0d, 0x61, 0xa4, 0x2a, 0xc6, 0xb8,
	0x52, 0x76, 0xfa, 0x2d, 0xb2, 0x90, 0xf8, 0x15, 0x00, 0xa3, 0x79, 0x2a, 0x52, 0xaa, 0x97, 0x19,
	0x3f, 0x6c, 0x33, 0x5e, 0xb4, 0xcf, 0xde, 0x2e, 0x2b, 0x9a, 0x7c, 0x9d, 0x96, 0xe9, 0x21, 0x4c,
	0x3a, 0x7f, 0xff, 0x53, 0xce, 0x07, 0xce, 0x0d, 0x38, 0xe6, 0x19, 0x37, 0xbf, 0x1b, 0x66, 0x8e,
	0xbf, 0x23, 0xa7, 0xe9, 0xa8, 0x4a, 0xc5, 0xaa, 0xe9, 0x31, 0xec, 0x94, 0xb2, 0x30, 0x55, 0x3c,
	0x7d, 0x53, 0x6b, 0xae, 0xda, 0xe3, 0xd4, 0x71, 0xd7, 0xea, 0xde, 0x8b, 0xcc, 0x7e, 0xfa, 0x7a,
	0x9d, 0x75, 0x0d, 0xfa, 0xaf, 0x15, 0x95, 0x34, 0xd7, 0x22, 0xe7, 0xca, 0xb2, 0xf4, 0x88, 0x6b,
	0x19, 0x74, 0x5c, 0xca, 0x42, 0x2a, 0x8b, 0xd4, 0x23, 0xad, 0x3a, 0xf8, 0xd3, 0x87, 0x9d, 0x33,
	0xca, 0xae, 0x48, 0xc9, 0xce, 0xb9, 0xb4, 0x94, 0x4f, 0x60, 0xf7, 0xa3, 0x50, 0xfa, 0xc6, 0x8d,
	0xc7, 0x93, 0x26, 0xf0, 0xe5, 0x1f, 0xd3, 0xfd, 0x8e, 0xb1, 0xf6, 0x36, 0xc4, 0x3d, 0x7c, 0x08,
	0xc1, 0x07, 0xae, 0x9b, 0xb3, 0x8d, 0x77, 0x6f, 0x5e, 0x89, 0x53, 0x75, 0x31, 0xbd, 0x7f, 0xcb,
	0x4d, 0x89, 0x7b, 0x38, 0x01, 0xdf, 0xc0, 0xc5, 0xdb, 0x2b, 0xd0, 0xa6, 0x63, 0xd2, 0xe1, 0x1e,
	0xf7, 0xf0, 0x6b, 0xd8, 0xb6, 0x54, 0xf8, 0x09, 0xcd, 0xd3, 0x62, 0x3e, 0xdf, 0x3c, 0xea, 0x1a,
	0xc4, 0xb8, 0x87, 0x8f, 0x60, 0xc7, 0x22, 0x5a, 0x3d, 0xa1, 0x1b, 0xb7, 0x58, 0x43, 0x1a, 0xf7,
	0x3e, 0x0f, 0xed, 0x6b, 0xfc, 0xe4, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x09, 0xda, 0x5b, 0x6f,
	0x9a, 0x05, 0x00, 0x00,
}
